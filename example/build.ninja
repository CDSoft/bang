# Ninja file generated by bang (https://github.com/cdsoft/bang)
# ../.build/bang build.lua -o build.ninja

ninja_required_version = 1.11.1

######################################################################
# Dummy project showing bang capabilities
# and many other features enabled by LuaX.
#
# The src directory contains one C source per executable (and per architecture).
#
# The lib directory is a library of sources common to all architectures.
#
# The arch directory contains one sub directory par architecture
# and header files defining a common API to all architectures.
######################################################################

builddir = .build
ex0 = $builddir/ex0
ex1 = $builddir/ex1

######################################################################
# Common compilation options
######################################################################

cflags = -O3 -Wall -Werror -Ilib -Iarch
ldflags = 

rule clang-tidy
  command = clang-tidy --quiet --use-color --warnings-as-errors=* -header-filter=.* --checks=*,-llvmlibc-restrict-system-libc-headers,-llvm-header-guard,-modernize-macro-to-enum,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-altera-id-dependent-backward-branch,-altera-unroll-loops,-readability-identifier-length,-cppcoreguidelines-macro-to-enum $in &> $out || (cat $out && false)

######################################################################
# Example 0: compilation with low level ninja primitives
######################################################################

######################################################################
# linux
######################################################################

cflags_linux = -DTARGET="x86_64-linux-musl"

rule cc_linux
  description = [linux] CC $out
  command = zig cc -target x86_64-linux-musl -c $cflags $cflags_linux -MD -MF $depfile $in -o $out
  depfile = $out.d

rule ar_linux
  description = [linux] AR $out
  command = zig ar -crs $out $in

ldflags_linux = 

rule ld_linux
  description = [linux] LD $out
  command = zig cc -target x86_64-linux-musl $ldflags $ldflags_linux -o $out $in

build $ex0/clang-tidy/arch/linux/ask.c.check: clang-tidy arch/linux/ask.c
build $ex0/arch/linux/ask.o: cc_linux arch/linux/ask.c |@ $ex0/clang-tidy/arch/linux/ask.c.check
build $ex0/clang-tidy/arch/linux/get_arch.c.check: clang-tidy arch/linux/get_arch.c
build $ex0/arch/linux/get_arch.o: cc_linux arch/linux/get_arch.c |@ $ex0/clang-tidy/arch/linux/get_arch.c.check
build $ex0/clang-tidy/arch/linux/say.c.check: clang-tidy arch/linux/say.c
build $ex0/arch/linux/say.o: cc_linux arch/linux/say.c |@ $ex0/clang-tidy/arch/linux/say.c.check
build $ex0/arch/linux/arch.a: ar_linux $ex0/arch/linux/ask.o $ex0/arch/linux/get_arch.o $ex0/arch/linux/say.o

######################################################################
# macos
######################################################################

cflags_macos = -DTARGET="x86_64-macos-none"

rule cc_macos
  description = [macos] CC $out
  command = zig cc -target x86_64-macos-none -c $cflags $cflags_macos -MD -MF $depfile $in -o $out
  depfile = $out.d

rule ar_macos
  description = [macos] AR $out
  command = zig ar -crs $out $in

ldflags_macos = 

rule ld_macos
  description = [macos] LD $out
  command = zig cc -target x86_64-macos-none $ldflags $ldflags_macos -o $out $in

build $ex0/clang-tidy/arch/macos/ask.c.check: clang-tidy arch/macos/ask.c
build $ex0/arch/macos/ask.o: cc_macos arch/macos/ask.c |@ $ex0/clang-tidy/arch/macos/ask.c.check
build $ex0/clang-tidy/arch/macos/get_arch.c.check: clang-tidy arch/macos/get_arch.c
build $ex0/arch/macos/get_arch.o: cc_macos arch/macos/get_arch.c |@ $ex0/clang-tidy/arch/macos/get_arch.c.check
build $ex0/clang-tidy/arch/macos/say.c.check: clang-tidy arch/macos/say.c
build $ex0/arch/macos/say.o: cc_macos arch/macos/say.c |@ $ex0/clang-tidy/arch/macos/say.c.check
build $ex0/arch/macos/arch.a: ar_macos $ex0/arch/macos/ask.o $ex0/arch/macos/get_arch.o $ex0/arch/macos/say.o

######################################################################
# windows
######################################################################

cflags_windows = -DTARGET="x86_64-windows-gnu"

rule cc_windows
  description = [windows] CC $out
  command = zig cc -target x86_64-windows-gnu -c $cflags $cflags_windows -MD -MF $depfile $in -o $out
  depfile = $out.d

rule ar_windows
  description = [windows] AR $out
  command = zig ar -crs $out $in

ldflags_windows = 

rule ld_windows
  description = [windows] LD $out
  command = zig cc -target x86_64-windows-gnu $ldflags $ldflags_windows -o $out $in

build $ex0/clang-tidy/arch/windows/ask.c.check: clang-tidy arch/windows/ask.c
build $ex0/arch/windows/ask.o: cc_windows arch/windows/ask.c |@ $ex0/clang-tidy/arch/windows/ask.c.check
build $ex0/clang-tidy/arch/windows/get_arch.c.check: clang-tidy arch/windows/get_arch.c
build $ex0/arch/windows/get_arch.o: cc_windows arch/windows/get_arch.c |@ $ex0/clang-tidy/arch/windows/get_arch.c.check
build $ex0/clang-tidy/arch/windows/say.c.check: clang-tidy arch/windows/say.c
build $ex0/arch/windows/say.o: cc_windows arch/windows/say.c |@ $ex0/clang-tidy/arch/windows/say.c.check
build $ex0/arch/windows/arch.a: ar_windows $ex0/arch/windows/ask.o $ex0/arch/windows/get_arch.o $ex0/arch/windows/say.o

######################################################################
# hello for linux
######################################################################

build $ex0/clang-tidy/linux/lib/hello/hello.c.check: clang-tidy lib/hello/hello.c
build $ex0/linux/lib/hello/hello.o: cc_linux lib/hello/hello.c |@ $ex0/clang-tidy/linux/lib/hello/hello.c.check
build $ex0/linux/lib/hello/hello.a: ar_linux $ex0/linux/lib/hello/hello.o

######################################################################
# utils for linux
######################################################################

build $ex0/clang-tidy/linux/lib/utils/fib.c.check: clang-tidy lib/utils/fib.c
build $ex0/linux/lib/utils/fib.o: cc_linux lib/utils/fib.c |@ $ex0/clang-tidy/linux/lib/utils/fib.c.check
build $ex0/clang-tidy/linux/lib/utils/utils.c.check: clang-tidy lib/utils/utils.c
build $ex0/linux/lib/utils/utils.o: cc_linux lib/utils/utils.c |@ $ex0/clang-tidy/linux/lib/utils/utils.c.check
build $ex0/linux/lib/utils/utils.a: ar_linux $ex0/linux/lib/utils/fib.o $ex0/linux/lib/utils/utils.o

######################################################################
# hello for macos
######################################################################

build $ex0/clang-tidy/macos/lib/hello/hello.c.check: clang-tidy lib/hello/hello.c
build $ex0/macos/lib/hello/hello.o: cc_macos lib/hello/hello.c |@ $ex0/clang-tidy/macos/lib/hello/hello.c.check
build $ex0/macos/lib/hello/hello.a: ar_macos $ex0/macos/lib/hello/hello.o

######################################################################
# utils for macos
######################################################################

build $ex0/clang-tidy/macos/lib/utils/fib.c.check: clang-tidy lib/utils/fib.c
build $ex0/macos/lib/utils/fib.o: cc_macos lib/utils/fib.c |@ $ex0/clang-tidy/macos/lib/utils/fib.c.check
build $ex0/clang-tidy/macos/lib/utils/utils.c.check: clang-tidy lib/utils/utils.c
build $ex0/macos/lib/utils/utils.o: cc_macos lib/utils/utils.c |@ $ex0/clang-tidy/macos/lib/utils/utils.c.check
build $ex0/macos/lib/utils/utils.a: ar_macos $ex0/macos/lib/utils/fib.o $ex0/macos/lib/utils/utils.o

######################################################################
# hello for windows
######################################################################

build $ex0/clang-tidy/windows/lib/hello/hello.c.check: clang-tidy lib/hello/hello.c
build $ex0/windows/lib/hello/hello.o: cc_windows lib/hello/hello.c |@ $ex0/clang-tidy/windows/lib/hello/hello.c.check
build $ex0/windows/lib/hello/hello.a: ar_windows $ex0/windows/lib/hello/hello.o

######################################################################
# utils for windows
######################################################################

build $ex0/clang-tidy/windows/lib/utils/fib.c.check: clang-tidy lib/utils/fib.c
build $ex0/windows/lib/utils/fib.o: cc_windows lib/utils/fib.c |@ $ex0/clang-tidy/windows/lib/utils/fib.c.check
build $ex0/clang-tidy/windows/lib/utils/utils.c.check: clang-tidy lib/utils/utils.c
build $ex0/windows/lib/utils/utils.o: cc_windows lib/utils/utils.c |@ $ex0/clang-tidy/windows/lib/utils/utils.c.check
build $ex0/windows/lib/utils/utils.a: ar_windows $ex0/windows/lib/utils/fib.o $ex0/windows/lib/utils/utils.o

######################################################################
# hi-repl for linux
######################################################################

build $ex0/clang-tidy/linux/bin/hi-repl.c.check: clang-tidy bin/hi-repl.c
build $ex0/linux/bin/hi-repl.o: cc_linux bin/hi-repl.c |@ $ex0/clang-tidy/linux/bin/hi-repl.c.check
build $ex0/linux/bin/hi-repl: ld_linux $ex0/linux/lib/hello/hello.a $ex0/linux/lib/utils/utils.a $ex0/arch/linux/arch.a $ex0/linux/bin/hi-repl.o

######################################################################
# hi for linux
######################################################################

build $ex0/clang-tidy/linux/bin/hi.c.check: clang-tidy bin/hi.c
build $ex0/linux/bin/hi.o: cc_linux bin/hi.c |@ $ex0/clang-tidy/linux/bin/hi.c.check
build $ex0/linux/bin/hi: ld_linux $ex0/linux/lib/hello/hello.a $ex0/linux/lib/utils/utils.a $ex0/arch/linux/arch.a $ex0/linux/bin/hi.o

######################################################################
# hi-repl for macos
######################################################################

build $ex0/clang-tidy/macos/bin/hi-repl.c.check: clang-tidy bin/hi-repl.c
build $ex0/macos/bin/hi-repl.o: cc_macos bin/hi-repl.c |@ $ex0/clang-tidy/macos/bin/hi-repl.c.check
build $ex0/macos/bin/hi-repl: ld_macos $ex0/macos/lib/hello/hello.a $ex0/macos/lib/utils/utils.a $ex0/arch/macos/arch.a $ex0/macos/bin/hi-repl.o

######################################################################
# hi for macos
######################################################################

build $ex0/clang-tidy/macos/bin/hi.c.check: clang-tidy bin/hi.c
build $ex0/macos/bin/hi.o: cc_macos bin/hi.c |@ $ex0/clang-tidy/macos/bin/hi.c.check
build $ex0/macos/bin/hi: ld_macos $ex0/macos/lib/hello/hello.a $ex0/macos/lib/utils/utils.a $ex0/arch/macos/arch.a $ex0/macos/bin/hi.o

######################################################################
# hi-repl for windows
######################################################################

build $ex0/clang-tidy/windows/bin/hi-repl.c.check: clang-tidy bin/hi-repl.c
build $ex0/windows/bin/hi-repl.o: cc_windows bin/hi-repl.c |@ $ex0/clang-tidy/windows/bin/hi-repl.c.check
build $ex0/windows/bin/hi-repl.exe: ld_windows $ex0/windows/lib/hello/hello.a $ex0/windows/lib/utils/utils.a $ex0/arch/windows/arch.a $ex0/windows/bin/hi-repl.o

######################################################################
# hi for windows
######################################################################

build $ex0/clang-tidy/windows/bin/hi.c.check: clang-tidy bin/hi.c
build $ex0/windows/bin/hi.o: cc_windows bin/hi.c |@ $ex0/clang-tidy/windows/bin/hi.c.check
build $ex0/windows/bin/hi.exe: ld_windows $ex0/windows/lib/hello/hello.a $ex0/windows/lib/utils/utils.a $ex0/arch/windows/arch.a $ex0/windows/bin/hi.o

######################################################################
# Example 1: compilation with the C compilation feature
######################################################################

######################################################################
# linux
######################################################################

rule x86_64-linux-musl-cc
  description = zig cc -target x86_64-linux-musl $out
  command = zig cc -target x86_64-linux-musl -c -MD -MF $depfile -DTARGET="x86_64-linux-musl" $cflags $cflags_linux $in -o $out
  depfile = $out.d

rule x86_64-linux-musl-ar
  description = zig ar $out
  command = zig ar -crs $out $in

rule x86_64-linux-musl-so
  description = cc $out
  command = cc -shared -o $out $in

rule x86_64-linux-musl-ld
  description = zig cc -target x86_64-linux-musl $out
  command = zig cc -target x86_64-linux-musl $ldflags $ldflags_linux -o $out $in

build $ex1/linux/arch/arch.a.tmp/arch/linux/ask.o-clang-tidy.check: clang-tidy arch/linux/ask.c
build $ex1/linux/arch/arch.a.tmp/arch/linux/ask.o: x86_64-linux-musl-cc arch/linux/ask.c |@ $ex1/linux/arch/arch.a.tmp/arch/linux/ask.o-clang-tidy.check
build $ex1/linux/arch/arch.a.tmp/arch/linux/get_arch.o-clang-tidy.check: clang-tidy arch/linux/get_arch.c
build $ex1/linux/arch/arch.a.tmp/arch/linux/get_arch.o: x86_64-linux-musl-cc arch/linux/get_arch.c |@ $ex1/linux/arch/arch.a.tmp/arch/linux/get_arch.o-clang-tidy.check
build $ex1/linux/arch/arch.a.tmp/arch/linux/say.o-clang-tidy.check: clang-tidy arch/linux/say.c
build $ex1/linux/arch/arch.a.tmp/arch/linux/say.o: x86_64-linux-musl-cc arch/linux/say.c |@ $ex1/linux/arch/arch.a.tmp/arch/linux/say.o-clang-tidy.check
build $ex1/arch/linux/arch.a: x86_64-linux-musl-ar $ex1/linux/arch/arch.a.tmp/arch/linux/ask.o $ex1/linux/arch/arch.a.tmp/arch/linux/get_arch.o $ex1/linux/arch/arch.a.tmp/arch/linux/say.o
build $ex1/linux/bin/hi-repl.tmp/bin/hi-repl.o-clang-tidy.check: clang-tidy bin/hi-repl.c
build $ex1/linux/bin/hi-repl.tmp/bin/hi-repl.o: x86_64-linux-musl-cc bin/hi-repl.c |@ $ex1/linux/bin/hi-repl.tmp/bin/hi-repl.o-clang-tidy.check
build $ex1/linux/bin/hi-repl.tmp/lib/hello/hello.o-clang-tidy.check: clang-tidy lib/hello/hello.c
build $ex1/linux/bin/hi-repl.tmp/lib/hello/hello.o: x86_64-linux-musl-cc lib/hello/hello.c |@ $ex1/linux/bin/hi-repl.tmp/lib/hello/hello.o-clang-tidy.check
build $ex1/linux/bin/hi-repl.tmp/lib/utils/fib.o-clang-tidy.check: clang-tidy lib/utils/fib.c
build $ex1/linux/bin/hi-repl.tmp/lib/utils/fib.o: x86_64-linux-musl-cc lib/utils/fib.c |@ $ex1/linux/bin/hi-repl.tmp/lib/utils/fib.o-clang-tidy.check
build $ex1/linux/bin/hi-repl.tmp/lib/utils/utils.o-clang-tidy.check: clang-tidy lib/utils/utils.c
build $ex1/linux/bin/hi-repl.tmp/lib/utils/utils.o: x86_64-linux-musl-cc lib/utils/utils.c |@ $ex1/linux/bin/hi-repl.tmp/lib/utils/utils.o-clang-tidy.check
build $ex1/linux/bin/hi-repl: x86_64-linux-musl-ld $ex1/linux/bin/hi-repl.tmp/bin/hi-repl.o $ex1/arch/linux/arch.a $ex1/linux/bin/hi-repl.tmp/lib/hello/hello.o $ex1/linux/bin/hi-repl.tmp/lib/utils/fib.o $ex1/linux/bin/hi-repl.tmp/lib/utils/utils.o
build $ex1/linux/bin/hi.tmp/bin/hi.o-clang-tidy.check: clang-tidy bin/hi.c
build $ex1/linux/bin/hi.tmp/bin/hi.o: x86_64-linux-musl-cc bin/hi.c |@ $ex1/linux/bin/hi.tmp/bin/hi.o-clang-tidy.check
build $ex1/linux/bin/hi.tmp/lib/hello/hello.o-clang-tidy.check: clang-tidy lib/hello/hello.c
build $ex1/linux/bin/hi.tmp/lib/hello/hello.o: x86_64-linux-musl-cc lib/hello/hello.c |@ $ex1/linux/bin/hi.tmp/lib/hello/hello.o-clang-tidy.check
build $ex1/linux/bin/hi.tmp/lib/utils/fib.o-clang-tidy.check: clang-tidy lib/utils/fib.c
build $ex1/linux/bin/hi.tmp/lib/utils/fib.o: x86_64-linux-musl-cc lib/utils/fib.c |@ $ex1/linux/bin/hi.tmp/lib/utils/fib.o-clang-tidy.check
build $ex1/linux/bin/hi.tmp/lib/utils/utils.o-clang-tidy.check: clang-tidy lib/utils/utils.c
build $ex1/linux/bin/hi.tmp/lib/utils/utils.o: x86_64-linux-musl-cc lib/utils/utils.c |@ $ex1/linux/bin/hi.tmp/lib/utils/utils.o-clang-tidy.check
build $ex1/linux/bin/hi: x86_64-linux-musl-ld $ex1/linux/bin/hi.tmp/bin/hi.o $ex1/arch/linux/arch.a $ex1/linux/bin/hi.tmp/lib/hello/hello.o $ex1/linux/bin/hi.tmp/lib/utils/fib.o $ex1/linux/bin/hi.tmp/lib/utils/utils.o

######################################################################
# macos
######################################################################

rule x86_64-macos-none-cc
  description = zig cc -target x86_64-macos-none $out
  command = zig cc -target x86_64-macos-none -c -MD -MF $depfile -DTARGET="x86_64-macos-none" $cflags $cflags_macos $in -o $out
  depfile = $out.d

rule x86_64-macos-none-ar
  description = zig ar $out
  command = zig ar -crs $out $in

rule x86_64-macos-none-so
  description = cc $out
  command = cc -shared -o $out $in

rule x86_64-macos-none-ld
  description = zig cc -target x86_64-macos-none $out
  command = zig cc -target x86_64-macos-none $ldflags $ldflags_macos -o $out $in

build $ex1/macos/arch/arch.a.tmp/arch/macos/ask.o-clang-tidy.check: clang-tidy arch/macos/ask.c
build $ex1/macos/arch/arch.a.tmp/arch/macos/ask.o: x86_64-macos-none-cc arch/macos/ask.c |@ $ex1/macos/arch/arch.a.tmp/arch/macos/ask.o-clang-tidy.check
build $ex1/macos/arch/arch.a.tmp/arch/macos/get_arch.o-clang-tidy.check: clang-tidy arch/macos/get_arch.c
build $ex1/macos/arch/arch.a.tmp/arch/macos/get_arch.o: x86_64-macos-none-cc arch/macos/get_arch.c |@ $ex1/macos/arch/arch.a.tmp/arch/macos/get_arch.o-clang-tidy.check
build $ex1/macos/arch/arch.a.tmp/arch/macos/say.o-clang-tidy.check: clang-tidy arch/macos/say.c
build $ex1/macos/arch/arch.a.tmp/arch/macos/say.o: x86_64-macos-none-cc arch/macos/say.c |@ $ex1/macos/arch/arch.a.tmp/arch/macos/say.o-clang-tidy.check
build $ex1/arch/macos/arch.a: x86_64-macos-none-ar $ex1/macos/arch/arch.a.tmp/arch/macos/ask.o $ex1/macos/arch/arch.a.tmp/arch/macos/get_arch.o $ex1/macos/arch/arch.a.tmp/arch/macos/say.o
build $ex1/macos/bin/hi-repl.tmp/bin/hi-repl.o-clang-tidy.check: clang-tidy bin/hi-repl.c
build $ex1/macos/bin/hi-repl.tmp/bin/hi-repl.o: x86_64-macos-none-cc bin/hi-repl.c |@ $ex1/macos/bin/hi-repl.tmp/bin/hi-repl.o-clang-tidy.check
build $ex1/macos/bin/hi-repl.tmp/lib/hello/hello.o-clang-tidy.check: clang-tidy lib/hello/hello.c
build $ex1/macos/bin/hi-repl.tmp/lib/hello/hello.o: x86_64-macos-none-cc lib/hello/hello.c |@ $ex1/macos/bin/hi-repl.tmp/lib/hello/hello.o-clang-tidy.check
build $ex1/macos/bin/hi-repl.tmp/lib/utils/fib.o-clang-tidy.check: clang-tidy lib/utils/fib.c
build $ex1/macos/bin/hi-repl.tmp/lib/utils/fib.o: x86_64-macos-none-cc lib/utils/fib.c |@ $ex1/macos/bin/hi-repl.tmp/lib/utils/fib.o-clang-tidy.check
build $ex1/macos/bin/hi-repl.tmp/lib/utils/utils.o-clang-tidy.check: clang-tidy lib/utils/utils.c
build $ex1/macos/bin/hi-repl.tmp/lib/utils/utils.o: x86_64-macos-none-cc lib/utils/utils.c |@ $ex1/macos/bin/hi-repl.tmp/lib/utils/utils.o-clang-tidy.check
build $ex1/macos/bin/hi-repl: x86_64-macos-none-ld $ex1/macos/bin/hi-repl.tmp/bin/hi-repl.o $ex1/arch/macos/arch.a $ex1/macos/bin/hi-repl.tmp/lib/hello/hello.o $ex1/macos/bin/hi-repl.tmp/lib/utils/fib.o $ex1/macos/bin/hi-repl.tmp/lib/utils/utils.o
build $ex1/macos/bin/hi.tmp/bin/hi.o-clang-tidy.check: clang-tidy bin/hi.c
build $ex1/macos/bin/hi.tmp/bin/hi.o: x86_64-macos-none-cc bin/hi.c |@ $ex1/macos/bin/hi.tmp/bin/hi.o-clang-tidy.check
build $ex1/macos/bin/hi.tmp/lib/hello/hello.o-clang-tidy.check: clang-tidy lib/hello/hello.c
build $ex1/macos/bin/hi.tmp/lib/hello/hello.o: x86_64-macos-none-cc lib/hello/hello.c |@ $ex1/macos/bin/hi.tmp/lib/hello/hello.o-clang-tidy.check
build $ex1/macos/bin/hi.tmp/lib/utils/fib.o-clang-tidy.check: clang-tidy lib/utils/fib.c
build $ex1/macos/bin/hi.tmp/lib/utils/fib.o: x86_64-macos-none-cc lib/utils/fib.c |@ $ex1/macos/bin/hi.tmp/lib/utils/fib.o-clang-tidy.check
build $ex1/macos/bin/hi.tmp/lib/utils/utils.o-clang-tidy.check: clang-tidy lib/utils/utils.c
build $ex1/macos/bin/hi.tmp/lib/utils/utils.o: x86_64-macos-none-cc lib/utils/utils.c |@ $ex1/macos/bin/hi.tmp/lib/utils/utils.o-clang-tidy.check
build $ex1/macos/bin/hi: x86_64-macos-none-ld $ex1/macos/bin/hi.tmp/bin/hi.o $ex1/arch/macos/arch.a $ex1/macos/bin/hi.tmp/lib/hello/hello.o $ex1/macos/bin/hi.tmp/lib/utils/fib.o $ex1/macos/bin/hi.tmp/lib/utils/utils.o

######################################################################
# windows
######################################################################

rule x86_64-windows-gnu-cc
  description = zig cc -target x86_64-windows-gnu $out
  command = zig cc -target x86_64-windows-gnu -c -MD -MF $depfile -DTARGET="x86_64-windows-gnu" $cflags $cflags_windows $in -o $out
  depfile = $out.d

rule x86_64-windows-gnu-ar
  description = zig ar $out
  command = zig ar -crs $out $in

rule x86_64-windows-gnu-so
  description = cc $out
  command = cc -shared -o $out $in

rule x86_64-windows-gnu-ld
  description = zig cc -target x86_64-windows-gnu $out
  command = zig cc -target x86_64-windows-gnu $ldflags $ldflags_windows -o $out $in

build $ex1/windows/arch/arch.a.tmp/arch/windows/ask.o-clang-tidy.check: clang-tidy arch/windows/ask.c
build $ex1/windows/arch/arch.a.tmp/arch/windows/ask.o: x86_64-windows-gnu-cc arch/windows/ask.c |@ $ex1/windows/arch/arch.a.tmp/arch/windows/ask.o-clang-tidy.check
build $ex1/windows/arch/arch.a.tmp/arch/windows/get_arch.o-clang-tidy.check: clang-tidy arch/windows/get_arch.c
build $ex1/windows/arch/arch.a.tmp/arch/windows/get_arch.o: x86_64-windows-gnu-cc arch/windows/get_arch.c |@ $ex1/windows/arch/arch.a.tmp/arch/windows/get_arch.o-clang-tidy.check
build $ex1/windows/arch/arch.a.tmp/arch/windows/say.o-clang-tidy.check: clang-tidy arch/windows/say.c
build $ex1/windows/arch/arch.a.tmp/arch/windows/say.o: x86_64-windows-gnu-cc arch/windows/say.c |@ $ex1/windows/arch/arch.a.tmp/arch/windows/say.o-clang-tidy.check
build $ex1/arch/windows/arch.a: x86_64-windows-gnu-ar $ex1/windows/arch/arch.a.tmp/arch/windows/ask.o $ex1/windows/arch/arch.a.tmp/arch/windows/get_arch.o $ex1/windows/arch/arch.a.tmp/arch/windows/say.o
build $ex1/windows/bin/hi-repl.exe.tmp/bin/hi-repl.o-clang-tidy.check: clang-tidy bin/hi-repl.c
build $ex1/windows/bin/hi-repl.exe.tmp/bin/hi-repl.o: x86_64-windows-gnu-cc bin/hi-repl.c |@ $ex1/windows/bin/hi-repl.exe.tmp/bin/hi-repl.o-clang-tidy.check
build $ex1/windows/bin/hi-repl.exe.tmp/lib/hello/hello.o-clang-tidy.check: clang-tidy lib/hello/hello.c
build $ex1/windows/bin/hi-repl.exe.tmp/lib/hello/hello.o: x86_64-windows-gnu-cc lib/hello/hello.c |@ $ex1/windows/bin/hi-repl.exe.tmp/lib/hello/hello.o-clang-tidy.check
build $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/fib.o-clang-tidy.check: clang-tidy lib/utils/fib.c
build $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/fib.o: x86_64-windows-gnu-cc lib/utils/fib.c |@ $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/fib.o-clang-tidy.check
build $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/utils.o-clang-tidy.check: clang-tidy lib/utils/utils.c
build $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/utils.o: x86_64-windows-gnu-cc lib/utils/utils.c |@ $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/utils.o-clang-tidy.check
build $ex1/windows/bin/hi-repl.exe: x86_64-windows-gnu-ld $ex1/windows/bin/hi-repl.exe.tmp/bin/hi-repl.o $ex1/arch/windows/arch.a $ex1/windows/bin/hi-repl.exe.tmp/lib/hello/hello.o $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/fib.o $ex1/windows/bin/hi-repl.exe.tmp/lib/utils/utils.o
build $ex1/windows/bin/hi.exe.tmp/bin/hi.o-clang-tidy.check: clang-tidy bin/hi.c
build $ex1/windows/bin/hi.exe.tmp/bin/hi.o: x86_64-windows-gnu-cc bin/hi.c |@ $ex1/windows/bin/hi.exe.tmp/bin/hi.o-clang-tidy.check
build $ex1/windows/bin/hi.exe.tmp/lib/hello/hello.o-clang-tidy.check: clang-tidy lib/hello/hello.c
build $ex1/windows/bin/hi.exe.tmp/lib/hello/hello.o: x86_64-windows-gnu-cc lib/hello/hello.c |@ $ex1/windows/bin/hi.exe.tmp/lib/hello/hello.o-clang-tidy.check
build $ex1/windows/bin/hi.exe.tmp/lib/utils/fib.o-clang-tidy.check: clang-tidy lib/utils/fib.c
build $ex1/windows/bin/hi.exe.tmp/lib/utils/fib.o: x86_64-windows-gnu-cc lib/utils/fib.c |@ $ex1/windows/bin/hi.exe.tmp/lib/utils/fib.o-clang-tidy.check
build $ex1/windows/bin/hi.exe.tmp/lib/utils/utils.o-clang-tidy.check: clang-tidy lib/utils/utils.c
build $ex1/windows/bin/hi.exe.tmp/lib/utils/utils.o: x86_64-windows-gnu-cc lib/utils/utils.c |@ $ex1/windows/bin/hi.exe.tmp/lib/utils/utils.o-clang-tidy.check
build $ex1/windows/bin/hi.exe: x86_64-windows-gnu-ld $ex1/windows/bin/hi.exe.tmp/bin/hi.o $ex1/arch/windows/arch.a $ex1/windows/bin/hi.exe.tmp/lib/hello/hello.o $ex1/windows/bin/hi.exe.tmp/lib/utils/fib.o $ex1/windows/bin/hi.exe.tmp/lib/utils/utils.o

######################################################################
# Project structure
######################################################################

rule graph.dot
  description = graph.dot $out
  command = ninja -f $in -t graph > $out

rule render_graph.svg
  description = render_graph.svg $out
  command = dot -Tsvg -o$out $in

rule svgtidy.svg
  description = svgtidy.svg $out
  command = doc/svgtidy.lua < $in > $out

build $builddir/tmp/doc/graph.svg.tmp/graph-1.dot: graph.dot build.ninja
build $builddir/tmp/doc/graph.svg.tmp/graph-2.svg: render_graph.svg $builddir/tmp/doc/graph.svg.tmp/graph-1.dot
build doc/graph.svg: svgtidy.svg $builddir/tmp/doc/graph.svg.tmp/graph-2.svg

######################################################################
# Regenerate build.ninja when build.lua changes
######################################################################

rule bang
  command = ../.build/bang $in -o $out
  generator = true

build build.ninja: bang build.lua | ./arch/linux/config.lua ./arch/macos/config.lua ./arch/windows/config.lua
