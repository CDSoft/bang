# Ninja file generated by bang (https://cdelord.fr/bang)

######################################################################
# Ninja file for bang
# This file is generated by running bootstrap.sh
######################################################################

######################################################################
# This file is part of bang.
#
# bang is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# bang is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with bang.  If not, see <https://www.gnu.org/licenses/>.
#
# For further information about bang you can visit
# https://cdelord.fr/bang
######################################################################

######################################################################
# Build directories
######################################################################

builddir = .build
bin = $builddir/bin
test = $builddir/test
doc = $builddir/doc

######################################################################
# Compilation
######################################################################

rule _builddir_version
  description = GIT version
  command = echo -n `git describe --tags` > $out

build $builddir/version: _builddir_version | .git/refs/tags .git/index

rule _bin_bang
  description = LUAX $out
  command = luax -q -o $out $in

build $bin/bang: _bin_bang src/atexit.lua src/bang.lua src/ident.lua src/log.lua src/ninja.lua lib/acc.lua lib/clean.lua lib/file.lua lib/help.lua lib/install.lua lib/ls.lua lib/pipe.lua $builddir/version
build compile: phony $bin/bang

default compile

######################################################################
# Tests
######################################################################

rule diff
  description = DIFF $in
  command = diff $in > $out || (cat $out && false)

build $test/test.diff: diff $test/test.ninja test/test.ninja
build $test/new_file.diff: diff $test/tmp/new_file.txt test/new_file.txt

rule _test_test.ninja
  description = BANG $in
  command = rm -f $test/tmp/new_file.txt ; $bin/bang -q $in -o $out -- arg1 arg2 -x=y

build $test/test.ninja | $test/tmp/new_file.txt: _test_test.ninja test/test.lua | $bin/bang |@ $test/test.diff $test/new_file.diff
build test: phony $test/test.ninja

default test

######################################################################
# Installation
######################################################################

prefix = ~/.local

rule install-bin
  description = INSTALL $in to bin
  command = install -v -D -t $${PREFIX:-$prefix}/bin $in

build install-bin: install-bin $bin/bang
build install: phony install-bin

######################################################################
# Clean
######################################################################

rule clean-_builddir
  description = CLEAN $builddir
  command = rm -rf $builddir/*

build clean-_builddir: clean-_builddir
build clean: phony clean-_builddir

######################################################################
# Help
######################################################################

rule help
  description = help
  command = echo "Ninja file for building Bang"; echo ""; echo "Targets:"; echo "  help      show this help message"; echo "  compile   compile Bang"; echo "  test      test Bang"; echo "  install   install Bang in PREFIX or ~/.local"; echo "  clean     clean generated files"; echo ""; echo "Without any arguments, Ninja will compile and test Bang.";

build help: help
