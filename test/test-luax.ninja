# Ninja file generated by bang (https://cdelord.fr/bang)

# A short description of the Ninja file for building Bang test
#
# Targets:
#   help                         show this help message
#   target1                      description of target1
#   target2                      description of target2
#   target3-with-a-longer-name   description of target3
#   target4                      description of target4
#   install                      install Bang test in PREFIX or ~/.local/pub/bang_test
#   clean                        clean generated files
#
# More information at https://cdelord.fr/bang

ninja_required_version = 1.11.1

######################################################################
# This file is generated by bang for test purpose.
# Section comments can have multiple lines.
######################################################################

# This comment comes from test-module.lua

######################################################################
# Atomic variables
######################################################################

var1 = string
var2 = 42
var3 = true
# v1        = $var1
# vars.var1 = string
# v2        = $var2
# vars.var2 = 42
# v3        = $var3
# vars.var3 = true
# vars.expand: « var1 = string, var2 = 42, var3 = true »
foo = FOO
bar = bar is $foo
baz = baz is $foo and $bar
# vars expand with recursive definitions: « baz = baz is FOO and bar is FOO »
# vars.expand on a list: {"FOO", {"bar is FOO", "baz is FOO and bar is FOO"}}

######################################################################
# Compound variables
######################################################################

var4 = string 42 true  foo     bar     baz   
# v4        = $var4
# vars.var4 = string 42 true  foo     bar     baz   

######################################################################
# Rules
######################################################################

rule cc
  description = CC $out
  command = gcc $cflags -c $in -o $out

# cc = "cc"

######################################################################
# Build statements
######################################################################

build foo1.o: cc foo1.c foo.h
build foo2.o | a.log b.log: cc foo2.c foo.h | a.dat b.dat || x.dat
  myvar = myval
# o1 = "foo1.o"
# o2 = "foo2.o"
build all: phony foo1.c foo2.c
build foo3.o foo4.o foo5.o: cc foo3.c
# o3 = {"foo3.o", "foo4.o", "foo5.o"}

######################################################################
# Inheritance
######################################################################

rule r1
  command = cmd1

build b1 | o1: r1 | i1 i2 i3

rule r2
  command = cmd2

build b2 | o2: r2 | i4 i5

######################################################################
# Embedded rules
######################################################################

rule special_target.txt
  description = a rule embedded inside a build statement
  command = cat $in > $out
  depfile = $out.d

build special_target.txt | hidden_output: special_target.txt file1.txt file2.txt | hidden_input

######################################################################
# Nested rules (pipe simulation)
######################################################################

rule ypp.md
  command = ypp $in -o $out

rule panda.html
  command = panda $in -o $out

rule wkhtmltopdf.pdf
  command = wkhtmltopdf $in $out

build $builddir/doc/file1.md: ypp.md doc/file1.md
build $builddir/tmp/doc/file2.html.tmp/file2-1.md: ypp.md doc/file2.md
build $builddir/doc/file2.html: panda.html $builddir/tmp/doc/file2.html.tmp/file2-1.md | foo.css
build $builddir/tmp/doc/file3.pdf.tmp/file3-1.md: ypp.md doc/file3.md | foo.in
  variable = baz
build $builddir/tmp/doc/file3.pdf.tmp/file3-2.html: panda.html $builddir/tmp/doc/file3.pdf.tmp/file3-1.md | foo.css
  variable = baz
build $builddir/doc/file3.pdf | bar.out: wkhtmltopdf.pdf $builddir/tmp/doc/file3.pdf.tmp/file3-2.html | pdf.css
  variable = baz

######################################################################
# Pools
######################################################################

pool link_pool
  depth = 4

rule link
  command = true
  pool = link_pool

build link1: link
build link2: link
  pool = 

######################################################################
# Default
######################################################################

default foo bar

######################################################################
# Accumulations
######################################################################

# xs = {"item1", "item2", "item3"}

######################################################################
# ls test
######################################################################

# test/bar
# test/foo
# test/new_file.txt
# test/stress-gen.lua
# test/stress.lua
# test/test-default-1-lua.ninja
# test/test-default-1-luax.ninja
# test/test-default-1.lua
# test/test-default-1.ninja
# test/test-default-2-lua.ninja
# test/test-default-2-luax.ninja
# test/test-default-2.lua
# test/test-default-2.ninja
# test/test-default-3-lua.ninja
# test/test-default-3-luax.ninja
# test/test-default-3.lua
# test/test-err-bad_generator_arg-1.lua
# test/test-err-bad_generator_arg-1.stderr
# test/test-err-bad_generator_arg-2.lua
# test/test-err-bad_generator_arg-2.stderr
# test/test-err-bad_generator_arg-3.lua
# test/test-err-bad_generator_arg-3.stderr
# test/test-err-incomplete_rule_definition-1.lua
# test/test-err-incomplete_rule_definition-1.stderr
# test/test-err-incomplete_rule_definition-2.lua
# test/test-err-incomplete_rule_definition-2.stderr
# test/test-err-multiple_build.lua
# test/test-err-multiple_build.stderr
# test/test-err-multiple_generator.lua
# test/test-err-multiple_generator.stderr
# test/test-err-multiple_pool.lua
# test/test-err-multiple_pool.stderr
# test/test-err-multiple_rule.lua
# test/test-err-multiple_rule.stderr
# test/test-err-multiple_var.lua
# test/test-err-multiple_var.stderr
# test/test-err-unknown_pool_var.lua
# test/test-err-unknown_pool_var.stderr
# test/test-err-unknown_rule.lua
# test/test-err-unknown_rule.stderr
# test/test-err-unknown_rule_var.lua
# test/test-err-unknown_rule_var.stderr
# test/test-future-version-1.lua
# test/test-future-version-1.ninja
# test/test-future-version-2.lua
# test/test-future-version-2.ninja
# test/test-future-version-3.lua
# test/test-future-version-3.ninja
# test/test-lua.ninja
# test/test-luax.ninja
# test/test-module.lua
# test/test.lua
# test/unknown_file.stderr

######################################################################
# ls test/*
######################################################################

# test/new_file.txt
# test/stress-gen.lua
# test/stress.lua
# test/test-default-1-lua.ninja
# test/test-default-1-luax.ninja
# test/test-default-1.lua
# test/test-default-1.ninja
# test/test-default-2-lua.ninja
# test/test-default-2-luax.ninja
# test/test-default-2.lua
# test/test-default-2.ninja
# test/test-default-3-lua.ninja
# test/test-default-3-luax.ninja
# test/test-default-3.lua
# test/test-err-bad_generator_arg-1.lua
# test/test-err-bad_generator_arg-1.stderr
# test/test-err-bad_generator_arg-2.lua
# test/test-err-bad_generator_arg-2.stderr
# test/test-err-bad_generator_arg-3.lua
# test/test-err-bad_generator_arg-3.stderr
# test/test-err-incomplete_rule_definition-1.lua
# test/test-err-incomplete_rule_definition-1.stderr
# test/test-err-incomplete_rule_definition-2.lua
# test/test-err-incomplete_rule_definition-2.stderr
# test/test-err-multiple_build.lua
# test/test-err-multiple_build.stderr
# test/test-err-multiple_generator.lua
# test/test-err-multiple_generator.stderr
# test/test-err-multiple_pool.lua
# test/test-err-multiple_pool.stderr
# test/test-err-multiple_rule.lua
# test/test-err-multiple_rule.stderr
# test/test-err-multiple_var.lua
# test/test-err-multiple_var.stderr
# test/test-err-unknown_pool_var.lua
# test/test-err-unknown_pool_var.stderr
# test/test-err-unknown_rule.lua
# test/test-err-unknown_rule.stderr
# test/test-err-unknown_rule_var.lua
# test/test-err-unknown_rule_var.stderr
# test/test-future-version-1.lua
# test/test-future-version-1.ninja
# test/test-future-version-2.lua
# test/test-future-version-2.ninja
# test/test-future-version-3.lua
# test/test-future-version-3.ninja
# test/test-lua.ninja
# test/test-luax.ninja
# test/test-module.lua
# test/test.lua
# test/unknown_file.stderr

######################################################################
# ls test/*.lua
######################################################################

# test/stress-gen.lua
# test/stress.lua
# test/test-default-1.lua
# test/test-default-2.lua
# test/test-default-3.lua
# test/test-err-bad_generator_arg-1.lua
# test/test-err-bad_generator_arg-2.lua
# test/test-err-bad_generator_arg-3.lua
# test/test-err-incomplete_rule_definition-1.lua
# test/test-err-incomplete_rule_definition-2.lua
# test/test-err-multiple_build.lua
# test/test-err-multiple_generator.lua
# test/test-err-multiple_pool.lua
# test/test-err-multiple_rule.lua
# test/test-err-multiple_var.lua
# test/test-err-unknown_pool_var.lua
# test/test-err-unknown_rule.lua
# test/test-err-unknown_rule_var.lua
# test/test-future-version-1.lua
# test/test-future-version-2.lua
# test/test-future-version-3.lua
# test/test-module.lua
# test/test.lua

######################################################################
# ls test/**
######################################################################

# test/bar
# test/bar/empty
# test/foo
# test/foo/f1.c
# test/foo/f2.lua
# test/foo/sub
# test/foo/sub/f3.c
# test/foo/sub/f4.lua
# test/new_file.txt
# test/stress-gen.lua
# test/stress.lua
# test/test-default-1-lua.ninja
# test/test-default-1-luax.ninja
# test/test-default-1.lua
# test/test-default-1.ninja
# test/test-default-2-lua.ninja
# test/test-default-2-luax.ninja
# test/test-default-2.lua
# test/test-default-2.ninja
# test/test-default-3-lua.ninja
# test/test-default-3-luax.ninja
# test/test-default-3.lua
# test/test-err-bad_generator_arg-1.lua
# test/test-err-bad_generator_arg-1.stderr
# test/test-err-bad_generator_arg-2.lua
# test/test-err-bad_generator_arg-2.stderr
# test/test-err-bad_generator_arg-3.lua
# test/test-err-bad_generator_arg-3.stderr
# test/test-err-incomplete_rule_definition-1.lua
# test/test-err-incomplete_rule_definition-1.stderr
# test/test-err-incomplete_rule_definition-2.lua
# test/test-err-incomplete_rule_definition-2.stderr
# test/test-err-multiple_build.lua
# test/test-err-multiple_build.stderr
# test/test-err-multiple_generator.lua
# test/test-err-multiple_generator.stderr
# test/test-err-multiple_pool.lua
# test/test-err-multiple_pool.stderr
# test/test-err-multiple_rule.lua
# test/test-err-multiple_rule.stderr
# test/test-err-multiple_var.lua
# test/test-err-multiple_var.stderr
# test/test-err-unknown_pool_var.lua
# test/test-err-unknown_pool_var.stderr
# test/test-err-unknown_rule.lua
# test/test-err-unknown_rule.stderr
# test/test-err-unknown_rule_var.lua
# test/test-err-unknown_rule_var.stderr
# test/test-future-version-1.lua
# test/test-future-version-1.ninja
# test/test-future-version-2.lua
# test/test-future-version-2.ninja
# test/test-future-version-3.lua
# test/test-future-version-3.ninja
# test/test-lua.ninja
# test/test-luax.ninja
# test/test-module.lua
# test/test.lua
# test/unknown_file.stderr

######################################################################
# ls test/**.c
######################################################################

# test/foo/f1.c
# test/foo/sub/f3.c

######################################################################
# ls test/**.lua
######################################################################

# test/foo/f2.lua
# test/foo/sub/f4.lua
# test/stress-gen.lua
# test/stress.lua
# test/test-default-1.lua
# test/test-default-2.lua
# test/test-default-3.lua
# test/test-err-bad_generator_arg-1.lua
# test/test-err-bad_generator_arg-2.lua
# test/test-err-bad_generator_arg-3.lua
# test/test-err-incomplete_rule_definition-1.lua
# test/test-err-incomplete_rule_definition-2.lua
# test/test-err-multiple_build.lua
# test/test-err-multiple_generator.lua
# test/test-err-multiple_pool.lua
# test/test-err-multiple_rule.lua
# test/test-err-multiple_var.lua
# test/test-err-unknown_pool_var.lua
# test/test-err-unknown_rule.lua
# test/test-err-unknown_rule_var.lua
# test/test-future-version-1.lua
# test/test-future-version-2.lua
# test/test-future-version-3.lua
# test/test-module.lua
# test/test.lua

######################################################################
# additional file
######################################################################

# .build/test/luax/new_file.txt should be created

######################################################################
# case expressions
######################################################################

# opt1 = "-g"
# opt2 = "-O3"
# opt3 = "-O2"
# opt4 = "-g"
# opt5 = "-O3"
# opt6 = nil

######################################################################
# Command line arguments
######################################################################

# The command line arguments are: {"arg1", "arg2", "-x=y", [0]="test/test.lua"}

######################################################################
# Bang arguments
######################################################################

# bang = {
#     cli_args = {"-g", ".build/bin/bang", "-q", "test/test.lua", "-o", ".build/test/luax/test.ninja", "--", "arg1", "arg2", "-x=y",
#         [0] = ".build/bin/bang",
#     },
#     gen_cmd = ".build/bin/bang",
#     input = "test/test.lua",
#     output = ".build/test/luax/test.ninja",
#     quiet = true,
# }

######################################################################
# C compilers
######################################################################

rule zig-cc
  description = zig $out
  command = zig cc -target x86_64-linux-musl -c -MD -MF $depfile -Og -g -Iinc $in -o $out
  depfile = $out.d

rule zig-ar
  description = zig $out
  command = zig ar -crs $out $in

rule zig-so
  description = zig $out
  command = cc -shared -o $out $in

rule zig-ld
  description = zig $out
  command = zig ld -target x86_64-linux-musl -lm -o $out $in

build f1.o: zig-cc f1.c | $builddir/foo
build $builddir/tmp/lib.a.tmp/f2.o: zig-cc f2.c | $builddir/foo
build lib.a: zig-ar f1.o $builddir/tmp/lib.a.tmp/f2.o | $builddir/foo
build $builddir/tmp/libf3.so.tmp/f3.o: zig-cc f3.c | $builddir/foo
build libf3.so: zig-so f1.o lib.a $builddir/tmp/libf3.so.tmp/f3.o | $builddir/foo
build $builddir/tmp/file.exe.tmp/f4.o: zig-cc f4.c | $builddir/foo
build file.exe: zig-ld f1.o lib.a f3.o $builddir/tmp/file.exe.tmp/f4.o | $builddir/foo

######################################################################
# LuaX compiler
######################################################################

rule luax
  description = luax $out
  command = /path/to/luax compile -t luax $in -o $out -s -k "a \"super\" key" -x -y

build hello-luax-1: luax hello.luax module.lua
build hello-luax-2: luax hello.luax module.lua

rule luax-lua
  description = luax-lua $out
  command = /path/to/luax compile -t lua $in -o $out -s -k "a \"super\" key"

build hello-lua: luax-lua hello.lua module.lua

rule luax-pandoc
  description = luax-pandoc $out
  command = /path/to/luax compile -t pandoc $in -o $out -s -k "a \"super\" key"

build hello-pandoc: luax-pandoc hello.lua module.lua

rule luax-native
  description = luax-native $out
  command = /path/to/luax compile -t native $in -o $out -s -k "a \"super\" key" -q

build hello-native: luax-native hello.lua module.lua

rule luax-linux-x86_64
  description = luax-linux-x86_64 $out
  command = /path/to/luax compile -t linux-x86_64 $in -o $out -s -k "a \"super\" key"

build hello-linux-x86_64: luax-linux-x86_64 hello.lua module.lua

rule luax-linux-x86_64-musl
  description = luax-linux-x86_64-musl $out
  command = /path/to/luax compile -t linux-x86_64-musl $in -o $out -s -k "a \"super\" key"

build hello-linux-x86_64-musl: luax-linux-x86_64-musl hello.lua module.lua

rule luax-linux-aarch64
  description = luax-linux-aarch64 $out
  command = /path/to/luax compile -t linux-aarch64 $in -o $out -s -k "a \"super\" key"

build hello-linux-aarch64: luax-linux-aarch64 hello.lua module.lua

rule luax-linux-aarch64-musl
  description = luax-linux-aarch64-musl $out
  command = /path/to/luax compile -t linux-aarch64-musl $in -o $out -s -k "a \"super\" key"

build hello-linux-aarch64-musl: luax-linux-aarch64-musl hello.lua module.lua

rule luax-macos-x86_64
  description = luax-macos-x86_64 $out
  command = /path/to/luax compile -t macos-x86_64 $in -o $out -s -k "a \"super\" key"

build hello-macos-x86_64: luax-macos-x86_64 hello.lua module.lua

rule luax-macos-aarch64
  description = luax-macos-aarch64 $out
  command = /path/to/luax compile -t macos-aarch64 $in -o $out -s -k "a \"super\" key"

build hello-macos-aarch64: luax-macos-aarch64 hello.lua module.lua

rule luax-windows-x86_64
  description = luax-windows-x86_64 $out
  command = /path/to/luax compile -t windows-x86_64 $in -o $out -s -k "a \"super\" key"

build hello-windows-x86_64: luax-windows-x86_64 hello.lua module.lua

######################################################################
# Document generators
######################################################################

rule cat
  description = cat $out
  command = cat $in > $out

build cat.txt: cat f.txt

rule cp
  description = cp $out
  command = cp -d --preserve=mode $in $out

build copy.txt: cp f.txt

rule tac
  description = tac $out
  command = tac $in > $out

build rev.txt | z: tac f.txt | x y foo.txt
  other_arg = a b

rule rule_1
  command = r1

rule rule_2
  command = r2

build $builddir/tmp/bar.md.tmp/bar-1: rule_1 foo.rst
build $builddir/tmp/bar.md.tmp/bar-2: cat $builddir/tmp/bar.md.tmp/bar-1
build $builddir/tmp/bar.md.tmp/bar-3: rule_2 $builddir/tmp/bar.md.tmp/bar-2
build bar.md | z: tac $builddir/tmp/bar.md.tmp/bar-3 | x y

######################################################################
# Installation
######################################################################

prefix = ~/.local/pub/bang_test

rule install-bin
  description = INSTALL $in to bin
  command = install -v -D -t $${PREFIX:-$prefix}/bin $in

build install-bin: install-bin foo1.bin foo2.bin foo3.bin

rule install-lib
  description = INSTALL $in to lib
  command = install -v -D -t $${PREFIX:-$prefix}/lib $in

build install-lib: install-lib foo1.lib
build install: phony install-bin install-lib

######################################################################
# Clean
######################################################################

rule clean-_builddir
  description = CLEAN $builddir
  command = rm -rf $builddir/*

build clean-_builddir: clean-_builddir

rule clean-_builddir_foo
  description = CLEAN $builddir/foo
  command = rm -rf $builddir/foo

build clean-_builddir_foo: clean-_builddir_foo

rule clean-foo_bar
  description = CLEAN foo/bar
  command = rm -rf foo/bar

build clean-foo_bar: clean-foo_bar
build clean: phony clean-_builddir clean-_builddir_foo clean-foo_bar

######################################################################
# Help
######################################################################

rule help
  description = help
  command = echo "A short description of the Ninja file for building Bang test"; $
            echo ""; $
            echo "Targets:"; $
            echo "  help                         show this help message"; $
            echo "  target1                      description of target1"; $
            echo "  target2                      description of target2"; $
            echo "  target3-with-a-longer-name   description of target3"; $
            echo "  target4                      description of target4"; $
            echo "  install                      install Bang test in PREFIX or ~/.local/pub/bang_test"; $
            echo "  clean                        clean generated files"; $
            echo ""; $
            echo "More information at https://cdelord.fr/bang"

build help: help

######################################################################
# Regenerate .build/test/luax/test.ninja when test/test.lua changes
######################################################################

rule bang
  command = .build/bin/bang -q $in -o $out -- arg1 arg2 -x=y
  generator = true

build .build/test/luax/test.ninja: bang test/test.lua | foo bar test/test-module.lua
  another_variable = abc def
