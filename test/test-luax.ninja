# Ninja file generated by bang (https://cdelord.fr/bang)

ninja_required_version = 1.11.1

######################################################################
# This file is generated by bang for test purpose.
# Section comments can have multiple lines.
######################################################################

######################################################################
# Atomic variables
######################################################################

var1 = string
var2 = 42
var3 = true
# v1        = $var1
# vars.var1 = string
# v2        = $var2
# vars.var2 = 42
# v3        = $var3
# vars.var3 = true

######################################################################
# Compound variables
######################################################################

var4 = string 42 true foo bar
# v4        = $var4
# vars.var4 = string 42 true foo bar

######################################################################
# Rules
######################################################################

rule cc
  description = CC $out
  command = gcc $cflags -c $in -o $out

# cc = "cc"

######################################################################
# Build statements
######################################################################

build foo1.o: cc foo1.c foo.h
build foo2.o | a.log b.log: cc foo2.c foo.h | a.dat b.dat || x.dat
  myvar = myval
# o1 = "foo1.o"
# o2 = "foo2.o"
build all: phony foo1.c foo2.c
build foo3.o foo4.o foo5.o: cc foo3.c
# o3 = {"foo3.o", "foo4.o", "foo5.o"}

######################################################################
# Inheritance
######################################################################

rule r1
  command = cmd1

build b1 | o1: r1 | i1 i2 i3

rule r2
  command = cmd2

build b2 | o2: r2 | i4 i5

######################################################################
# Embedded rules
######################################################################

rule special_target.txt
  description = a rule embedded inside a build statement
  command = cat $in > $out
  depfile = $out.d

build special_target.txt | hidden_output: special_target.txt file1.txt file2.txt | hidden_input

######################################################################
# Nested rules (pipe simulation)
######################################################################

rule ypp.md
  command = ypp $in -o $out

rule panda.html
  command = panda $in -o $out

rule wkhtmltopdf.pdf
  command = wkhtmltopdf $in $out

build $builddir/doc/file1.md: ypp.md doc/file1.md
build $builddir/pipe/doc/file2-pipe-1.md: ypp.md doc/file2.md
build $builddir/doc/file2.html: panda.html $builddir/pipe/doc/file2-pipe-1.md | foo.css
build $builddir/pipe/doc/file3-pipe-1.md: ypp.md doc/file3.md | foo.in
  variable = baz
build $builddir/pipe/doc/file3-pipe-2.html: panda.html $builddir/pipe/doc/file3-pipe-1.md | foo.css
  variable = baz
build $builddir/doc/file3.pdf | bar.out: wkhtmltopdf.pdf $builddir/pipe/doc/file3-pipe-2.html | pdf.css
  variable = baz

######################################################################
# Pools
######################################################################

pool link_pool
  depth = 4

rule link
  pool = link_pool

build link1: link
build link2: link
  pool =

######################################################################
# Default
######################################################################

default foo bar

######################################################################
# Accumulations
######################################################################

# xs = {"item1", "item2", "item3"}

######################################################################
# ls test
######################################################################

# test/bar
# test/foo
# test/new_file.txt
# test/stress-gen.lua
# test/stress.lua
# test/test-future-version-1-lua.ninja
# test/test-future-version-1-luax.ninja
# test/test-future-version-1.lua
# test/test-future-version-2-lua.ninja
# test/test-future-version-2-luax.ninja
# test/test-future-version-2.lua
# test/test-future-version-3-lua.ninja
# test/test-future-version-3-luax.ninja
# test/test-future-version-3.lua
# test/test-lua.ninja
# test/test-luax.ninja
# test/test.lua

######################################################################
# ls test/*
######################################################################

# test/new_file.txt
# test/stress-gen.lua
# test/stress.lua
# test/test-future-version-1-lua.ninja
# test/test-future-version-1-luax.ninja
# test/test-future-version-1.lua
# test/test-future-version-2-lua.ninja
# test/test-future-version-2-luax.ninja
# test/test-future-version-2.lua
# test/test-future-version-3-lua.ninja
# test/test-future-version-3-luax.ninja
# test/test-future-version-3.lua
# test/test-lua.ninja
# test/test-luax.ninja
# test/test.lua

######################################################################
# ls test/*.lua
######################################################################

# test/stress-gen.lua
# test/stress.lua
# test/test-future-version-1.lua
# test/test-future-version-2.lua
# test/test-future-version-3.lua
# test/test.lua

######################################################################
# ls test/**
######################################################################

# test/bar
# test/bar/empty
# test/foo
# test/foo/f1.c
# test/foo/f2.lua
# test/foo/sub
# test/foo/sub/f3.c
# test/foo/sub/f4.lua
# test/new_file.txt
# test/stress-gen.lua
# test/stress.lua
# test/test-future-version-1-lua.ninja
# test/test-future-version-1-luax.ninja
# test/test-future-version-1.lua
# test/test-future-version-2-lua.ninja
# test/test-future-version-2-luax.ninja
# test/test-future-version-2.lua
# test/test-future-version-3-lua.ninja
# test/test-future-version-3-luax.ninja
# test/test-future-version-3.lua
# test/test-lua.ninja
# test/test-luax.ninja
# test/test.lua

######################################################################
# ls test/**.c
######################################################################

# test/foo/f1.c
# test/foo/sub/f3.c

######################################################################
# ls test/**.lua
######################################################################

# test/foo/f2.lua
# test/foo/sub/f4.lua
# test/stress-gen.lua
# test/stress.lua
# test/test-future-version-1.lua
# test/test-future-version-2.lua
# test/test-future-version-3.lua
# test/test.lua

######################################################################
# additional file
######################################################################

# .build/test/luax/new_file.txt should be created

######################################################################
# Command line arguments
######################################################################

# The command line arguments are: {"arg1", "arg2", "-x=y"}

######################################################################
# Bang arguments
######################################################################

# bang = {
#     input = "test/test.lua",
#     output = ".build/test/luax/test.ninja",
#     quiet = true,
# }

######################################################################
# Installation
######################################################################

prefix = ~/.local/pub/bang_test

rule install-bin
  description = INSTALL $in to bin
  command = install -v -D -t $${PREFIX:-$prefix}/bin $in

build install-bin: install-bin foo1.bin foo2.bin foo3.bin

rule install-lib
  description = INSTALL $in to lib
  command = install -v -D -t $${PREFIX:-$prefix}/lib $in

build install-lib: install-lib foo1.lib
build install: phony install-bin install-lib

######################################################################
# Clean
######################################################################

rule clean-_builddir
  description = CLEAN $builddir
  command = rm -rf $builddir/*

build clean-_builddir: clean-_builddir

rule clean-_builddir_foo
  description = CLEAN $builddir/foo
  command = rm -rf $builddir/foo

build clean-_builddir_foo: clean-_builddir_foo

rule clean-foo_bar
  description = CLEAN foo/bar
  command = rm -rf foo/bar

build clean-foo_bar: clean-foo_bar
build clean: phony clean-_builddir clean-_builddir_foo clean-foo_bar

######################################################################
# Help
######################################################################

rule help
  description = help
  command = echo "A short description of the Ninja file for building Bang test"; echo ""; echo "Targets:"; echo "  help                         show this help message"; echo "  target1                      description of target1"; echo "  target2                      description of target2"; echo "  target3-with-a-longer-name   description of target3"; echo "  target4                      description of target4"; echo "  install                      install Bang test in PREFIX or ~/.local/pub/bang_test"; echo "  clean                        clean generated files"; echo ""; echo "More information at https://cdelord.fr/bang";

build help: help

######################################################################
# Regenerate .build/test/luax/test.ninja when test/test.lua changes
######################################################################

rule bang
  command = bang $quiet $in -o $out -- $args
  generator = true

build .build/test/luax/test.ninja: bang test/test.lua | foo bar
  another_variable = abc def
  args = arg1 arg2 -x=y
  quiet = -q
