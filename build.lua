section [[
Ninja file for bang
This file is generated by running bootstrap.sh
]]

section [[
This file is part of bang.

bang is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

bang is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with bang.  If not, see <https://www.gnu.org/licenses/>.

For further information about bang you can visit
https://cdelord.fr/bang
]]

local F = require "F"
local fs = require "fs"

section "Build directories"

var "builddir" ".build"

F"bin test doc" : words() : foreach(function(dir)
    var (dir) (fs.join("$builddir", dir))
end)

---------------------------------------------------------------------
-- Compilation
---------------------------------------------------------------------

section "Compilation"

rule "luax" {
    description = "LUAX $out",
    command = "luax -q -o $out $in",
}

rule "version" {
    description = "GIT $version",
    command = "echo \"return [[$$(git describe --tags || echo undefined)]]\" > $out",
}

build "$bin/bang" {"luax", ls "src/*.lua", "$builddir/version.lua"}
build "$builddir/version.lua" {"version",
    implicit_in = ".git/refs/tags .git/index",
}
phony "compile" { "$bin/bang" }
default "compile"

---------------------------------------------------------------------
-- Tests
---------------------------------------------------------------------

section "Tests"

rule "run_test" {
    description = "BANG $in",
    command = "$bin/bang -q $in -o $out -- arg1 arg2 -x=y",
}

rule "diff" {
    description = "DIFF $in",
    command = "diff $in && touch $out",
}

build "$test/test.ninja" {"run_test", "test/test.lua",
    implicit_in = "$bin/bang",
    implicit_out = "$test/tmp/new_file.txt",
}
build "$test/test.ok" {"diff", {"$test/test.ninja", "test/test.ninja"}}
build "$test/new_file.ok" {"diff", {"$test/tmp/new_file.txt", "test/new_file.txt"}}

phony "test" {"$test/test.ok", "$test/new_file.ok"}
default "test"

---------------------------------------------------------------------
-- Help
---------------------------------------------------------------------

section "Help"

file "help.txt"
: write [[
Ninja file for building Bang

Targets:
  help      show this help message
  compile   compile Bang
  test      test Bang

Without any arguments, Ninja will compile and test Bang.
]]

rule "print-help" {
    description = "help",
    command = "cat $in",
}

build "help" { "print-help", "help.txt" }
